import java.net.URL
import java.nio.file.Files
import java.security.MessageDigest

buildscript {
    repositories {
        google()
        mavenCentral()
        gradlePluginPortal()
    }
    dependencies {
        // Adjust Gradle plugin versions if needed
        classpath 'com.android.tools.build:gradle:8.8.0'
        classpath 'org.jetbrains.kotlin:kotlin-gradle-plugin:1.9.0'
    }

}

plugins {
    id 'com.android.application'
}

tasks.register("downloadImageFS") {
    File imageFS = new File("app/src/main/assets/imagefs.txz")
    String imageFSSHA256Sum = "https://gitlab.com/winlator3/winlator-extra/-/raw/main/imagefs/imagefs.txz.sha256sum"
    int parts = 4

    doLast {
        if (!imageFS.exists()) {
            println("ImageFS was not present, downloading...\n")
            FileOutputStream outputStream = new FileOutputStream(imageFS)
            for (int i = 0; i < parts; i++) {
                File partFile = new File(String.format("app/src/main/assets/imagefs.txz.%02d", i))
                String partURL = String.format("https://gitlab.com/winlator3/winlator-extra/-/raw/main/imagefs/imagefs.txz.%02d", i)
                new URL(partURL).withInputStream { p ->
                    partFile.withOutputStream { it << p }
                    outputStream << partFile.bytes
                }
                partFile.delete()
            }
            outputStream.close()
        }

        String remoteChecksum = new URL(imageFSSHA256Sum).text.split("\\s+")[0].trim()
        byte[] data = Files.readAllBytes(imageFS.toPath())
        byte[] hash = MessageDigest.getInstance("SHA-256").digest(data)
        String localChecksum = String.format("%064x", new BigInteger(1, hash))

        if (remoteChecksum != localChecksum) {
            println("The version of ImageFS present locally is older than remote or hasn't been downloaded properly, redownloading...\n")
            FileOutputStream outputStream = new FileOutputStream(imageFS)
            for (int i = 0; i < parts; i++) {
                File partFile = new File(String.format("app/src/main/assets/imagefs.txz.%02d", i))
                String partURL = String.format("https://gitlab.com/winlator3/winlator-extra/-/raw/main/imagefs/imagefs.txz.%02d", i)
                new URL(partURL).withInputStream { p ->
                    partFile.withOutputStream { it << p }
                    outputStream << partFile.bytes
                }
                partFile.delete()
            }
            outputStream.close()
        }
    }
}

tasks.register("downloadProton") {
    File protonARM64EC = new File("app/src/main/assets/proton-9.0-arm64ec.txz")
    File protonX8664 = new File("app/src/main/assets/proton-9.0-x86_64.txz")
    String protonARM64ECUrl = "https://gitlab.com/winlator3/winlator-extra/-/raw/main/proton/proton-9.0-arm64ec.txz"
    String protonARM64ECSHA256Sum = "https://gitlab.com/winlator3/winlator-extra/-/raw/main/proton/proton-9.0-arm64ec.txz.sha256sum"
    String protonX8664Url = "https://gitlab.com/winlator3/winlator-extra/-/raw/main/proton/proton-9.0-x86_64.txz"
    String protonX8664SHA256Sum = "https://gitlab.com/winlator3/winlator-extra/-/raw/main/proton/proton-9.0-x86_64.txz.sha256sum"

    ext.checkSHA256Sum = { File file ->
        byte[] data = Files.readAllBytes(file.toPath())
        byte[] hash = MessageDigest.getInstance("SHA-256").digest(data)
        return String.format("%064x", new BigInteger(1, hash))
    }

    doLast {
        if (!protonARM64EC.exists()) {
            println("Proton 9.0 ARM64EC was not present, downloading...\n")
            new URL(protonARM64ECUrl).withInputStream { i -> protonARM64EC.withOutputStream { it << i } }
        }
        if (!protonX8664.exists()) {
            println("Proton 9.0 x86_64 was not present, downloading...\n")
            new URL(protonX8664Url).withInputStream { i -> protonX8664.withOutputStream { it << i } }
        }

        String remoteChecksum = new URL(protonARM64ECSHA256Sum).text.split("\\s+")[0].trim()
        byte[] data = Files.readAllBytes(protonARM64EC.toPath())
        byte[] hash = MessageDigest.getInstance("SHA-256").digest(data)
        String localChecksum = String.format("%064x", new BigInteger(1, hash))

        if (remoteChecksum != localChecksum) {
            println("The version of Proton 9.0 ARM64EC present locally is older than remote or hasn't been downloaded properly, redownloading...\n")
            new URL(protonARM64ECUrl).withInputStream { i -> protonARM64EC.withOutputStream { it << i } }
        }

        remoteChecksum = new URL(protonX8664SHA256Sum).text.split("\\s+")[0].trim()
        data = Files.readAllBytes(protonX8664.toPath())
        hash = MessageDigest.getInstance("SHA-256").digest(data)
        localChecksum = String.format("%064x", new BigInteger(1, hash))

        if (remoteChecksum != localChecksum) {
            println("The version of Proton 9.0 x86_64 present locally is older than remote or hasn't been downloaded properly, redownloading...\n")
            new URL(protonX8664Url).withInputStream { i -> protonX8664.withOutputStream { it << i } }
        }
    }
}

tasks.register("prepareKotlinBuildScriptModel"){}
downloadProton.dependsOn(downloadImageFS)
preBuild.dependsOn(downloadProton)

android {
    namespace 'com.winlator.xmod'
    // Keep compileSdk from your current config. If you want to match Termux-X11, you could set to 34.
    compileSdk 34

    defaultConfig {
        applicationId "com.winlator.xmod"
        minSdkVersion 26
        // We’re preserving Winlator’s request to keep targetSdkVersion at 28
        targetSdkVersion 28

        versionCode 1
        versionName "winlator xmod"

        // External native build from Winlator
        externalNativeBuild {
            cmake {
                cppFlags ''
            }
        }

        // You originally only did arm64-v8a. If you want multi-ABI splits, see below.
        ndk {
            abiFilters 'arm64-v8a'
        }
    }


    // Java versions: Winlator uses Java 17, Termux-X11 used 1.9
    // Using 17 is typically fine (covers 1.9 features).
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
    }

    // Keep Winlator’s buildTypes
    buildTypes {
        debug {
            minifyEnabled false
        }
        // If you have a release build type, add it here
    }

    ndkVersion '27.0.12077973'  // from your original config

    externalNativeBuild {
        cmake {
            path 'src/main/cpp/CMakeLists.txt'
        }
    }

    // If you want to be sure modern JNI packaging is used:
    packagingOptions {
        jniLibs {
            useLegacyPackaging = true
        }
    }
}

dependencies {
    // Winlator’s dependencies
    implementation 'androidx.appcompat:appcompat:1.6.1'
    implementation 'androidx.preference:preference:1.2.1'
    implementation 'com.google.android.material:material:1.10.0'
    implementation 'com.github.luben:zstd-jni:1.5.2-3@aar'
    implementation 'org.tukaani:xz:1.7'
    implementation 'org.apache.commons:commons-compress:1.20'
    implementation 'androidx.activity:activity-ktx:1.7.2'
    implementation 'androidx.fragment:fragment-ktx:1.6.2'
    implementation files('libs/MidiSynth/MidiSynth.jar')
    implementation 'androidx.recyclerview:recyclerview:1.3.2'
    implementation 'com.squareup.retrofit2:retrofit:2.9.0'
    implementation 'com.squareup.retrofit2:converter-gson:2.9.0'
    implementation 'com.squareup.okhttp3:okhttp:4.9.3'
    implementation 'com.google.code.gson:gson:2.8.8'
    implementation 'org.conscrypt:conscrypt-android:2.5.2'
    implementation 'org.bouncycastle:bcprov-jdk15on:1.68'
    implementation 'org.openjsse:openjsse:1.1.7'
    implementation 'androidx.core:core:1.12.0'
    implementation 'com.github.bumptech.glide:glide:4.11.0'
    implementation 'com.kohlschutter.junixsocket:junixsocket-common:2.6.0'
    implementation 'com.kohlschutter.junixsocket:junixsocket-native-common:2.6.0'
    annotationProcessor 'com.github.bumptech.glide:compiler:4.11.0'
}




